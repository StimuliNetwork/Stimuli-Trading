// EasyLanguage Strategy based on Stimuli Network Indicator

// Pine ScriptÂ® original by StimuliNetwork
// Subject to Mozilla Public License 2.0

// Global constant for "no plot" values
Define: NO_PLOT_VALUE (-1.2345e-10);

Inputs:
    WhipsawWindow(5),
    MaxLookback(5000),
    RiskRewardRatio(2.0),
    StopLossATRMultiplier(1.5),
    TimeframeHigherSymbolActive(false, "Use Higher Timeframe (Data2) for RSI?"), 
    RSILength(14),
    RSIHighValue(75, "RSI Upper Threshold (Info)"),
    RSILowValue(25, "RSI Lower Threshold (Info)"),
    StochLength(14, "Stochastic Length (for StochRSI)"),
    ShowWickAnalysis(false, "Show Previous Wick Analysis");

Variables:
    // Whipsaw Optimization State
    BestFast(0), 
    BestSlow(0), 
    MinWhipsaws(100000),
    onceWhipsawCalcDone(false),

    // SMAs from optimization
    SMA1(NO_PLOT_VALUE),
    SMA2(NO_PLOT_VALUE),
    AverageSMA(NO_PLOT_VALUE),
    ema20(0),

    // ATR and SL/TP Distances (these are key for the strategy)
    AtrVal(0),
    CalculatedStopLossDistance(0),   // Renamed to avoid conflict with SetStopLoss
    CalculatedTakeProfitDistance(0), // Renamed

    // RSI
    rsiVal(0),
    htfRsiValue(0),

    // Stochastic RSI
    rawStochRSI(0),
    kVal(0),
    dVal(0),

    // Conditions
    htfRsiBullish(false),
    htfRsiBearish(false),
    isBullish(false),
    isBearish(false),
    buyCond(false),
    sellCond(false),

    // Indicator Plotting Variables (for visual reference)
    latestBuyAverage(NO_PLOT_VALUE), 
    latestSellAverage(NO_PLOT_VALUE), 
    buySL_plot(NO_PLOT_VALUE), // For plotting
    buyTP_plot(NO_PLOT_VALUE), // For plotting
    sellSL_plot(NO_PLOT_VALUE),// For plotting
    sellTP_plot(NO_PLOT_VALUE),// For plotting
    
    // Color calculation helpers
    buyChanged(false),
    sellChanged(false),

    // Previous Wick Analysis
    prevHighWick(NO_PLOT_VALUE),
    prevLowWick(NO_PLOT_VALUE),
    prevMeanWick(NO_PLOT_VALUE),

    // Loop variables for optimization
    fastLoop(0), slowLoop(0), iLoop(0),
    maxBarsToScanForOpt(0), whipsawCount(0),
    lastCrossoverBarIndexInScan(0), bLastCrossAboveInScan(false),
    smaFastI(0), smaSlowI(0), smaFastPrev(0), smaSlowPrev(0),
    bCrossUpInScan(false), bCrossDownInScan(false),

    // Colors
    colorTeal(RGB(0,128,128)), colorMaroon(RGB(128,0,0)),
    colorLime(Color.LimeGreen), colorRed(Color.Red),
    colorGray(Color.Gray), colorSilver(Color.Silver),

    fillPlotValue(NO_PLOT_VALUE), fillPlotColor(Color.Transparent),
    priceOffsetForShape(0);

// ========== ONE-TIME WHIPSAW OPTIMIZATION ==========
If CurrentBar = 101 and onceWhipsawCalcDone = false Then Begin 
    onceWhipsawCalcDone = true; 
    maxBarsToScanForOpt = MinList(CurrentBar -1, MaxLookback); 
    For fastLoop = 8 To 20 Begin
        For slowLoop = fastLoop + 1 To 21 Begin
            whipsawCount = 0;
            lastCrossoverBarIndexInScan = 0; 
            bLastCrossAboveInScan = false;
            For iLoop = 1 To maxBarsToScanForOpt - WhipsawWindow Begin
                smaFastI = Average(Close[iLoop], fastLoop);
                smaSlowI = Average(Close[iLoop], slowLoop);
                smaFastPrev = Average(Close[iLoop + 1], fastLoop);
                smaSlowPrev = Average(Close[iLoop + 1], slowLoop);
                bCrossUpInScan = smaFastPrev < smaSlowPrev and smaFastI > smaSlowI;
                bCrossDownInScan = smaFastPrev > smaSlowPrev and smaFastI < smaSlowI;
                If bCrossUpInScan or bCrossDownInScan Then Begin
                    If lastCrossoverBarIndexInScan <> 0 and iLoop - lastCrossoverBarIndexInScan <= WhipsawWindow Then Begin
                        If (bCrossUpInScan and not bLastCrossAboveInScan) or (bCrossDownInScan and bLastCrossAboveInScan) Then Begin
                            whipsawCount = whipsawCount + 1;
                        End;
                    End;
                    lastCrossoverBarIndexInScan = iLoop; 
                    bLastCrossAboveInScan = bCrossUpInScan;
                End;
            End; 
            If whipsawCount < MinWhipsaws Then Begin
                MinWhipsaws = whipsawCount;
                BestFast = fastLoop;
                BestSlow = slowLoop;
            End;
        End; 
    End; 
    Print(DateToString(Date), " ", TimeToString(Time), " Whipsaw Opt: BestFast=", BestFast, ", BestSlow=", BestSlow, ", MinWhipsaws=", MinWhipsaws);
End;

// ========== PER-BAR CALCULATIONS (Indicator Logic) ==========
If CurrentBar > 1 Then Begin 
    If BestFast > 0 Then SMA1 = Average(Close, BestFast) Else SMA1 = NO_PLOT_VALUE;
    If BestSlow > 0 Then SMA2 = Average(Close, BestSlow) Else SMA2 = NO_PLOT_VALUE;

    If SMA1 <> NO_PLOT_VALUE and SMA2 <> NO_PLOT_VALUE Then AverageSMA = (SMA1 + SMA2) / 2 Else AverageSMA = NO_PLOT_VALUE;
    ema20 = XAverage(Close, 20);

    AtrVal = AvgTrueRange(14);
    CalculatedStopLossDistance = StopLossATRMultiplier * AtrVal; // This is a distance
    CalculatedTakeProfitDistance = CalculatedStopLossDistance * RiskRewardRatio; // This is a distance
    priceOffsetForShape = AtrVal * 0.25;

    rsiVal = RSI(Close, RSILength);
    If TimeframeHigherSymbolActive and BarType of Data2 > 0 Then htfRsiValue = RSI(Close of Data2, RSILength) Else htfRsiValue = rsiVal; 

    If Highest(rsiVal, StochLength) - Lowest(rsiVal, StochLength) > 0 then rawStochRSI = 100 * (rsiVal - Lowest(rsiVal, StochLength)) / (Highest(rsiVal, StochLength) - Lowest(rsiVal, StochLength)) else rawStochRSI = 50;
    kVal = Average(rawStochRSI, 3); 
    dVal = Average(kVal, 3);       

    htfRsiBullish = (not TimeframeHigherSymbolActive) or htfRsiValue > 50;
    htfRsiBearish = (not TimeframeHigherSymbolActive) or htfRsiValue < 50;

    isBullish = rsiVal > rsiVal[1] and kVal > dVal and htfRsiBullish;
    isBearish = rsiVal < rsiVal[1] and kVal < dVal and htfRsiBearish;

    buyCond = Close Crosses Over Open and Low < Open and isBullish;
    sellCond = Close Crosses Under Open and High > Open and isBearish;

    // --- Logic for plotting indicator's idea of SL/TP lines ---
    Variable: lastLatestBuyAverage(NO_PLOT_VALUE), lastLatestSellAverage(NO_PLOT_VALUE);
    lastLatestBuyAverage = latestBuyAverage;
    lastLatestSellAverage = latestSellAverage;

    If buyCond Then Begin
        latestBuyAverage = Close; // For plot reference
        buySL_plot = latestBuyAverage - CalculatedStopLossDistance;
        buyTP_plot = latestBuyAverage + CalculatedTakeProfitDistance;
        latestSellAverage = NO_PLOT_VALUE; 
        sellSL_plot = NO_PLOT_VALUE;
        sellTP_plot = NO_PLOT_VALUE;
    End;

    If sellCond Then Begin
        latestSellAverage = Close; // For plot reference
        sellSL_plot = latestSellAverage + CalculatedStopLossDistance; 
        sellTP_plot = latestSellAverage - CalculatedTakeProfitDistance;
        latestBuyAverage = NO_PLOT_VALUE; 
        buySL_plot = NO_PLOT_VALUE;
        buyTP_plot = NO_PLOT_VALUE;
    End;

    // Update plotting SL/TP if no new signal but old one persists
    If latestBuyAverage <> NO_PLOT_VALUE then begin
        buySL_plot = latestBuyAverage - CalculatedStopLossDistance;
        buyTP_plot = latestBuyAverage + CalculatedTakeProfitDistance;
    end;
    If latestSellAverage <> NO_PLOT_VALUE then begin
        sellSL_plot = latestSellAverage + CalculatedStopLossDistance;
        sellTP_plot = latestSellAverage - CalculatedTakeProfitDistance;
    end;


    buyChanged = (latestBuyAverage <> NO_PLOT_VALUE and latestBuyAverage <> lastLatestBuyAverage);
    sellChanged = (latestSellAverage <> NO_PLOT_VALUE and latestSellAverage <> lastLatestSellAverage);
    
    If ShowWickAnalysis Then Begin
        prevHighWick = High[1]; prevLowWick = Low[1]; prevMeanWick = (prevHighWick + prevLowWick) / 2;
    End Else Begin
        prevHighWick = NO_PLOT_VALUE; prevLowWick = NO_PLOT_VALUE; prevMeanWick = NO_PLOT_VALUE;
    End;

    If latestBuyAverage <> NO_PLOT_VALUE Then fillPlotValue = latestBuyAverage
    Else If latestSellAverage <> NO_PLOT_VALUE Then fillPlotValue = latestSellAverage
    Else fillPlotValue = NO_PLOT_VALUE;

    If isBullish Then fillPlotColor = colorLime Else If isBearish Then fillPlotColor = colorRed Else fillPlotColor = colorGray;
    
    // Alerts are usually part of indicators; strategies can have them but focus on trades.
    // If buyCond Then Alert("Sniper Buy Signal: " + GetSymbolName + " @ " + NumToStr(Close, NumToStrCount(MinMove / PriceScale,0)));
    // If sellCond Then Alert("Sniper Sell Signal: " + GetSymbolName + " @ " + NumToStr(Close, NumToStrCount(MinMove / PriceScale,0)));
End; 

// ========== STRATEGY TRADING LOGIC ==========
If CurrentBar > 1 and AtrVal > 0 Then Begin // Ensure ATR is calculated for SL/TP distances

    // Set Stop Loss and Profit Target amounts for upcoming trades
    // These are distances in points/currency from entry price.
    // Platform automatically handles direction (subtracts for long SL, adds for short SL etc.)
    SetStopLoss(CalculatedStopLossDistance);
    SetProfitTarget(CalculatedTakeProfitDistance);
    
    // --- Entry Logic ---
    If buyCond Then Begin
        If MarketPosition = -1 Then BuyToCover ("SX_Rev") Next Bar at Market; // Exit short if reversing
        Buy ("LE") Next Bar at Market;
    End;

    If sellCond Then Begin
        If MarketPosition = 1 Then Sell ("LX_Rev") Next Bar at Market; // Exit long if reversing
        SellShort ("SE") Next Bar at Market;
    End;
    
    // --- Explicit Stop Loss / Take Profit Exit Orders (Alternative to SetStopLoss/SetProfitTarget) ---
    // If you prefer to manage exits with explicit orders instead of SetStopLoss/SetProfitTarget,
    // you would need to store the entry price and calculate the SL/TP levels yourself.
    // Example (would require `entryPrice` variable and disabling SetStopLoss/SetProfitTarget):
    // If MarketPosition = 1 Then Begin
    //     Sell ("LX_SL") Next Bar at EntryPrice - CalculatedStopLossDistance Stop;
    //     Sell ("LX_PT") Next Bar at EntryPrice + CalculatedTakeProfitDistance Limit;
    // End;
    // If MarketPosition = -1 Then Begin
    //     BuyToCover ("SX_SL") Next Bar at EntryPrice + CalculatedStopLossDistance Stop;
    //     BuyToCover ("SX_PT") Next Bar at EntryPrice - CalculatedTakeProfitDistance Limit;
    // End;
    // For this example, we are using SetStopLoss and SetProfitTarget, which is simpler.
End;


// ========== PLOTTING (from original indicator for visual reference) ==========
Plot1(AverageSMA, "AvgSMA_Trend", Color.Gray, Default, 2); 
If AverageSMA <> NO_PLOT_VALUE And AverageSMA[1] <> NO_PLOT_VALUE Then Begin
    If AverageSMA > AverageSMA[1] Then SetPlotColor(1, colorTeal) Else If AverageSMA < AverageSMA[1] Then SetPlotColor(1, colorMaroon);
End Else SetPlotColor(1, Color.Gray);
SetPlotStyle(1, 1); // styleHistogram

Plot2(ema20, "EMA20", Color.Gray, Default, 3); 
If Close > ema20 Then SetPlotColor(2, colorTeal) Else If Close < ema20 Then SetPlotColor(2, colorMaroon) Else SetPlotColor(2, Color.Gray);
SetPlotStyle(2, 7); // styleArea

Plot3(latestBuyAverage, "LatestBuyPlot", Iff(buyChanged, colorLime, Color.Transparent), Default, 2); // Transparent if not changed
Plot4(latestSellAverage, "LatestSellPlot", Iff(sellChanged, colorRed, Color.Transparent), Default, 2); // Transparent if not changed

// Plot SL/TP lines based on indicator's logic for visual reference
Plot5(buySL_plot, "BuySL_Vis", colorMaroon, Default, 1); SetPlotStyle(5, 2); // Dashed
Plot6(buyTP_plot, "BuyTP_Vis", Color.DarkGreen, Default, 1); SetPlotStyle(6, 2); // Dashed
Plot7(sellSL_plot, "SellSL_Vis", colorMaroon, Default, 1); SetPlotStyle(7, 2); // Dashed
Plot8(sellTP_plot, "SellTP_Vis", Color.DarkGreen, Default, 1); SetPlotStyle(8, 2); // Dashed

If buyCond Then Plot9(High + priceOffsetForShape, "BuyShape", colorLime, Default, 2) Else Plot9(NO_PLOT_VALUE); 
SetPlotStyle(9, 3); // StyleTriangleUp 

If sellCond Then Plot10(Low - priceOffsetForShape, "SellShape", colorRed, Default, 2) Else Plot10(NO_PLOT_VALUE);
SetPlotStyle(10, 4); // StyleTriangleDown 

Plot11(fillPlotValue, "SignalFill_Vis", fillPlotColor, Default, 1); SetPlotStyle(11, 1); // styleHistogram

If ShowWickAnalysis Then Begin
    Plot12(prevHighWick, "PrevTopWick", colorRed, Default, 1); SetPlotStyle(12, 5); // styleCircle
    Plot13(prevLowWick, "PrevBotWick", Color.DarkGreen, Default, 1); SetPlotStyle(13, 5); // styleCircle
    Plot14(prevMeanWick, "PrevMeanWick", colorSilver, Default, 1); SetPlotStyle(14, 6); // styleCross
End Else Begin 
    Plot12(NO_PLOT_VALUE); Plot13(NO_PLOT_VALUE); Plot14(NO_PLOT_VALUE);
End;

// -- to God be the Glory
