// EasyLanguage Strategy based on Stimuli Network Indicator
// Refactored to use OptimizeWhipsawSMA and CalculateCoreSignals functions
// Enhanced with configurable lengths and constants.

// Pine ScriptÂ® original by StimuliNetwork
// Subject to Mozilla Public License 2.0

// ============== Global Constants ==============
Define: NO_PLOT_VALUE (-1.2345e-10); // A very specific unlikely value for "na" or "no plot".
Define: RSI_NEUTRAL_VALUE (50);     // Standard neutral value for RSI.
Define: MIN_BARS_FOR_OPTIMIZATION (101); // Min bars needed on chart before optimization runs.

// ============== Assumed Function Definitions ==============
// It is assumed that OptimizeWhipsawSMA and CalculateCoreSignals functions are defined elsewhere
// (e.g., via separate .elf files compiled with the project or pre-pended).
// Their definitions are not repeated here for brevity.
/*
// Function OptimizeWhipsawSMA(...) - See OptimizeWhipsawSMA.elf for full code
// Function CalculateCoreSignals(...) - See CalculateCoreSignals.elf for full code
*/

// ============== Inputs ==============
Inputs:
    // Whipsaw Optimization Inputs
    WhipsawWindow(5, "Whipsaw Window (Opt.)"),
    MaxLookback(5000, "Max Lookback (Opt.)"),

    // General Strategy Settings
    RiskRewardRatio(2.0, "Risk/Reward Ratio"),
    StopLossATRMultiplier(1.5, "Stop Loss ATR Multiplier"),

    // RSI Settings
    RSILength(14, "RSI Length"),
    TimeframeHigherSymbolActive(false, "Use Higher Timeframe RSI? (Data2)"),
    RSIHighValue(75, "RSI Upper Threshold (Info)"), // Informational
    RSILowValue(25, "RSI Lower Threshold (Info)"),  // Informational

    // Stochastic RSI Settings
    StochLength(14, "Stochastic Length (for StochRSI)"),
    StochKSmooth(3, "Stoch %K Smooth"),
    StochDSmooth(3, "Stoch %D Smooth"),

    // Other Indicator Lengths
    EMA20Length(20, "EMA Length"),      // Name kept as EMA20Length for consistency with original var if any, though it's generic EMA now
    AtrLength(14, "ATR Length"),

    // Display Settings
    ShowWickAnalysis(false, "Show Previous Wick Analysis");

Variables:
    // --- Whipsaw Optimization State ---
    BestFast(0), 
    BestSlow(0), 
    MinWhipsaws(100000),
    onceWhipsawCalcDone(false),

    // --- Variables for CalculateCoreSignals outputs ---
    currentSMA1(NO_PLOT_VALUE), currentSMA2(NO_PLOT_VALUE), currentAverageSMA(NO_PLOT_VALUE),
    currentEMA(0), // Renamed from currentEMA20
    currentAtrVal(0), currentRSIVal(0), currentKVal(0), currentDVal(0),
    currentHTFRSIVal(0), currentIsBullish(false), currentIsBearish(false),
    currentBuyCond(false), currentSellCond(false),

    // --- Main Strategy State Variables ---
    SMA1(NO_PLOT_VALUE), SMA2(NO_PLOT_VALUE), AverageSMA(NO_PLOT_VALUE),
    emaValue(0), // Renamed from ema20
    AtrVal(0),
    isBullish(false), isBearish(false),
    buyCond(false), sellCond(false),

    // --- Strategy Specific Financial Variables ---
    CalculatedStopLossDistance(0),
    CalculatedTakeProfitDistance(0),

    // --- Plotting Helper Variables (for visual reference of indicator logic) ---
    latestBuyAverage(NO_PLOT_VALUE), latestSellAverage(NO_PLOT_VALUE),
    buySL_plot(NO_PLOT_VALUE), buyTP_plot(NO_PLOT_VALUE),
    sellSL_plot(NO_PLOT_VALUE), sellTP_plot(NO_PLOT_VALUE),
    buyChanged(false), sellChanged(false),
    prevHighWick(NO_PLOT_VALUE), prevLowWick(NO_PLOT_VALUE), prevMeanWick(NO_PLOT_VALUE),
    fillPlotValue(NO_PLOT_VALUE), fillPlotColor(Color.Transparent),
    priceOffsetForShape(0),

    // --- Colors ---
    colorTeal(RGB(0,128,128)), colorMaroon(RGB(128,0,0)),
    colorLime(Color.LimeGreen), colorRed(Color.Red),
    colorGray(Color.Gray), colorSilver(Color.Silver);

// ========== ONE-TIME WHIPSAW OPTIMIZATION CALL ==========
// Calls the optimization function once after MIN_BARS_FOR_OPTIMIZATION bars have loaded.
If CurrentBar = MIN_BARS_FOR_OPTIMIZATION and onceWhipsawCalcDone = false Then Begin
    OptimizeWhipsawSMA(WhipsawWindow, MaxLookback, Close, BestFast, BestSlow, MinWhipsaws);
    onceWhipsawCalcDone = true; 
    // Print statement is inside OptimizeWhipsawSMA.
End;

// ========== PER-BAR CALCULATIONS (Indicator Logic & Strategy Values) ==========
// This block runs on each bar to calculate signals and prepare strategy parameters.
If CurrentBar > 1 Then Begin 
    // Call CalculateCoreSignals to get foundational indicator values and conditions.
    CalculateCoreSignals(
        BestFast, BestSlow,                             // Optimized SMA lengths
        RSILength, StochLength, StochKSmooth, StochDSmooth, // RSI and StochRSI parameters
        EMA20Length, AtrLength,                         // EMA and ATR lengths
        TimeframeHigherSymbolActive, Close of Data2,    // HTF RSI parameters
        RSIHighValue, RSILowValue,                      // Informational RSI thresholds
        Close, High, Low, Open,                         // Current bar data
        NO_PLOT_VALUE, RSI_NEUTRAL_VALUE,               // Constants
        // --- Output variables (passed by reference) ---
        currentSMA1, currentSMA2, currentAverageSMA, currentEMA, currentAtrVal,
        currentRSIVal, currentKVal, currentDVal, currentHTFRSIVal,
        currentIsBullish, currentIsBearish, currentBuyCond, currentSellCond
    );

    // Assign outputs from CalculateCoreSignals to strategy's main state variables.
    SMA1 = currentSMA1;
    SMA2 = currentSMA2;
    AverageSMA = currentAverageSMA;
    emaValue = currentEMA; // Store the calculated EMA value
    AtrVal = currentAtrVal; // Crucial for SL/TP calculation.
    isBullish = currentIsBullish;
    isBearish = currentIsBearish;
    buyCond = currentBuyCond;   // Buy condition from core signals.
    sellCond = currentSellCond; // Sell condition from core signals.

    // Calculate Strategy-Specific Stop Loss and Take Profit distances using AtrVal.
    If AtrVal > 0 then begin // Ensure AtrVal is valid and positive.
        CalculatedStopLossDistance = StopLossATRMultiplier * AtrVal;
        CalculatedTakeProfitDistance = CalculatedStopLossDistance * RiskRewardRatio;
    end else begin // Fallback if AtrVal is zero or not calculated yet.
        CalculatedStopLossDistance = (High - Low) * StopLossATRMultiplier; // Example fallback using bar range.
        CalculatedTakeProfitDistance = CalculatedStopLossDistance * RiskRewardRatio;
        If CalculatedStopLossDistance = 0 then CalculatedStopLossDistance = Close * 0.01; // Absolute minimum if High=Low
        If CalculatedTakeProfitDistance = 0 then CalculatedTakeProfitDistance = Close * 0.02;
    end;

    priceOffsetForShape = AtrVal * 0.25; // For plotting buy/sell shapes.

    // --- Logic for plotting indicator's visual cues (SL/TP lines, etc.) ---
    Variable: lastLatestBuyAverage(NO_PLOT_VALUE), lastLatestSellAverage(NO_PLOT_VALUE);
    lastLatestBuyAverage = latestBuyAverage;
    lastLatestSellAverage = latestSellAverage;

    If buyCond Then Begin
        latestBuyAverage = Close; // Record buy price for plotting.
        buySL_plot = latestBuyAverage - CalculatedStopLossDistance;
        buyTP_plot = latestBuyAverage + CalculatedTakeProfitDistance;
        latestSellAverage = NO_PLOT_VALUE; 
        sellSL_plot = NO_PLOT_VALUE;
        sellTP_plot = NO_PLOT_VALUE;
    End;

    If sellCond Then Begin
        latestSellAverage = Close; // Record sell price for plotting.
        sellSL_plot = latestSellAverage + CalculatedStopLossDistance; 
        sellTP_plot = latestSellAverage - CalculatedTakeProfitDistance;
        latestBuyAverage = NO_PLOT_VALUE; 
        buySL_plot = NO_PLOT_VALUE;
        buyTP_plot = NO_PLOT_VALUE;
    End;

    // Update plotting SL/TP if no new signal but an old one persists and distances are valid.
    If latestBuyAverage <> NO_PLOT_VALUE and CalculatedStopLossDistance > 0 then begin
        buySL_plot = latestBuyAverage - CalculatedStopLossDistance;
        buyTP_plot = latestBuyAverage + CalculatedTakeProfitDistance;
    end;
    If latestSellAverage <> NO_PLOT_VALUE and CalculatedStopLossDistance > 0 then begin
        sellSL_plot = latestSellAverage + CalculatedStopLossDistance;
        sellTP_plot = latestSellAverage - CalculatedTakeProfitDistance;
    end;

    buyChanged = (latestBuyAverage <> NO_PLOT_VALUE and latestBuyAverage <> lastLatestBuyAverage);
    sellChanged = (latestSellAverage <> NO_PLOT_VALUE and latestSellAverage <> lastLatestSellAverage);
    
    // Previous Wick Analysis for plotting.
    If ShowWickAnalysis Then Begin
        prevHighWick = High[1]; prevLowWick = Low[1]; prevMeanWick = (prevHighWick + prevLowWick) / 2;
    End Else Begin
        prevHighWick = NO_PLOT_VALUE; prevLowWick = NO_PLOT_VALUE; prevMeanWick = NO_PLOT_VALUE;
    End;

    // Determine fill plot value and color based on signal states.
    If latestBuyAverage <> NO_PLOT_VALUE Then fillPlotValue = latestBuyAverage
    Else If latestSellAverage <> NO_PLOT_VALUE Then fillPlotValue = latestSellAverage
    Else fillPlotValue = NO_PLOT_VALUE;

    If isBullish Then fillPlotColor = colorLime Else If isBearish Then fillPlotColor = colorRed Else fillPlotColor = colorGray;
    
    // Alerts are usually part of indicators; kept commented out in strategy for focus on trades.
    // If buyCond Then Alert("Sniper Buy Signal: " + GetSymbolName + " @ " + NumToStr(Close, NumToStrCount(MinMove / PriceScale,0)));
    // If sellCond Then Alert("Sniper Sell Signal: " + GetSymbolName + " @ " + NumToStr(Close, NumToStrCount(MinMove / PriceScale,0)));
End; 

// ========== STRATEGY TRADING LOGIC ==========
// This section executes trades based on the calculated conditions and parameters.
// Ensure CalculatedStopLossDistance is positive and valid before initiating trades.
If CurrentBar > 1 and CalculatedStopLossDistance > 0 Then Begin

    // Set Stop Loss and Profit Target amounts for the NATIVE strategy engine.
    // These are distances in points/currency from the entry price.
    SetStopLoss(CalculatedStopLossDistance);
    SetProfitTarget(CalculatedTakeProfitDistance);
    
    // --- Entry Logic ---
    // buyCond and sellCond are derived from CalculateCoreSignals.
    If buyCond Then Begin // If a buy signal occurs
        If MarketPosition = -1 Then BuyToCover ("SX_Rev") Next Bar at Market; // Exit short if reversing.
        Buy ("LE") Next Bar at Market; // Enter Long.
    End;

    If sellCond Then Begin // If a sell signal occurs
        If MarketPosition = 1 Then Sell ("LX_Rev") Next Bar at Market; // Exit long if reversing.
        SellShort ("SE") Next Bar at Market; // Enter Short.
    End;
End;


// ========== PLOTTING (Visual reference from original indicator) ==========
// Plotting remains the same, using the strategy's state variables for visualization.

Plot1(AverageSMA, "AvgSMA_Trend", Color.Gray, Default, 2); 
If AverageSMA <> NO_PLOT_VALUE And AverageSMA[1] <> NO_PLOT_VALUE Then Begin
    If AverageSMA > AverageSMA[1] Then SetPlotColor(1, colorTeal) Else If AverageSMA < AverageSMA[1] Then SetPlotColor(1, colorMaroon);
End Else SetPlotColor(1, Color.Gray); // Default color if no trend yet
SetPlotStyle(1, 1); // Style: Histogram

Plot2(emaValue, "EMA", Color.Gray, Default, 3); // Use emaValue
If Close > emaValue Then SetPlotColor(2, colorTeal) Else If Close < emaValue Then SetPlotColor(2, colorMaroon) Else SetPlotColor(2, Color.Gray);
SetPlotStyle(2, 7); // Style: Area

Plot3(latestBuyAverage, "LatestBuyPlot", Iff(buyChanged, colorLime, Color.Transparent), Default, 2);
Plot4(latestSellAverage, "LatestSellPlot", Iff(sellChanged, colorRed, Color.Transparent), Default, 2);

Plot5(buySL_plot, "BuySL_Vis", colorMaroon, Default, 1); SetPlotStyle(5, 2);
Plot6(buyTP_plot, "BuyTP_Vis", Color.DarkGreen, Default, 1); SetPlotStyle(6, 2);
Plot7(sellSL_plot, "SellSL_Vis", colorMaroon, Default, 1); SetPlotStyle(7, 2);
Plot8(sellTP_plot, "SellTP_Vis", Color.DarkGreen, Default, 1); SetPlotStyle(8, 2);

If buyCond Then Plot9(High + priceOffsetForShape, "BuyShape", colorLime, Default, 2) Else Plot9(NO_PLOT_VALUE); 
SetPlotStyle(9, 3); // Style: Triangle Up

If sellCond Then Plot10(Low - priceOffsetForShape, "SellShape", colorRed, Default, 2) Else Plot10(NO_PLOT_VALUE);
SetPlotStyle(10, 4); // Style: Triangle Down

Plot11(fillPlotValue, "SignalFill_Vis", fillPlotColor, Default, 1); SetPlotStyle(11, 1); // Style: Histogram

If ShowWickAnalysis Then Begin
    Plot12(prevHighWick, "PrevTopWick", colorRed, Default, 1); SetPlotStyle(12, 5);
    Plot13(prevLowWick, "PrevBotWick", Color.DarkGreen, Default, 1); SetPlotStyle(13, 5);
    Plot14(prevMeanWick, "PrevMeanWick", colorSilver, Default, 1); SetPlotStyle(14, 6);
End Else Begin 
    Plot12(NO_PLOT_VALUE); Plot13(NO_PLOT_VALUE); Plot14(NO_PLOT_VALUE);
End;

// -- to God be the Glory
